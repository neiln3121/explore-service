// Code generated by mockery v2.50.4. DO NOT EDIT.

package mocks

import (
	context "context"

	storage "github.com/neiln3121/explore-service/internal/storage"
	mock "github.com/stretchr/testify/mock"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

type Store_Expecter struct {
	mock *mock.Mock
}

func (_m *Store) EXPECT() *Store_Expecter {
	return &Store_Expecter{mock: &_m.Mock}
}

// GetLikedDecision provides a mock function with given fields: ctx, recipientID, actorID
func (_m *Store) GetLikedDecision(ctx context.Context, recipientID string, actorID string) (bool, error) {
	ret := _m.Called(ctx, recipientID, actorID)

	if len(ret) == 0 {
		panic("no return value specified for GetLikedDecision")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, recipientID, actorID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, recipientID, actorID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, recipientID, actorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_GetLikedDecision_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLikedDecision'
type Store_GetLikedDecision_Call struct {
	*mock.Call
}

// GetLikedDecision is a helper method to define mock.On call
//   - ctx context.Context
//   - recipientID string
//   - actorID string
func (_e *Store_Expecter) GetLikedDecision(ctx interface{}, recipientID interface{}, actorID interface{}) *Store_GetLikedDecision_Call {
	return &Store_GetLikedDecision_Call{Call: _e.mock.On("GetLikedDecision", ctx, recipientID, actorID)}
}

func (_c *Store_GetLikedDecision_Call) Run(run func(ctx context.Context, recipientID string, actorID string)) *Store_GetLikedDecision_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Store_GetLikedDecision_Call) Return(_a0 bool, _a1 error) *Store_GetLikedDecision_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_GetLikedDecision_Call) RunAndReturn(run func(context.Context, string, string) (bool, error)) *Store_GetLikedDecision_Call {
	_c.Call.Return(run)
	return _c
}

// GetLikedDecisions provides a mock function with given fields: ctx, recipientID, liked, token, limit
func (_m *Store) GetLikedDecisions(ctx context.Context, recipientID string, liked bool, token *uint64, limit *uint32) ([]*storage.Liker, error) {
	ret := _m.Called(ctx, recipientID, liked, token, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetLikedDecisions")
	}

	var r0 []*storage.Liker
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool, *uint64, *uint32) ([]*storage.Liker, error)); ok {
		return rf(ctx, recipientID, liked, token, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, bool, *uint64, *uint32) []*storage.Liker); ok {
		r0 = rf(ctx, recipientID, liked, token, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*storage.Liker)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, bool, *uint64, *uint32) error); ok {
		r1 = rf(ctx, recipientID, liked, token, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_GetLikedDecisions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLikedDecisions'
type Store_GetLikedDecisions_Call struct {
	*mock.Call
}

// GetLikedDecisions is a helper method to define mock.On call
//   - ctx context.Context
//   - recipientID string
//   - liked bool
//   - token *uint64
//   - limit *uint32
func (_e *Store_Expecter) GetLikedDecisions(ctx interface{}, recipientID interface{}, liked interface{}, token interface{}, limit interface{}) *Store_GetLikedDecisions_Call {
	return &Store_GetLikedDecisions_Call{Call: _e.mock.On("GetLikedDecisions", ctx, recipientID, liked, token, limit)}
}

func (_c *Store_GetLikedDecisions_Call) Run(run func(ctx context.Context, recipientID string, liked bool, token *uint64, limit *uint32)) *Store_GetLikedDecisions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(bool), args[3].(*uint64), args[4].(*uint32))
	})
	return _c
}

func (_c *Store_GetLikedDecisions_Call) Return(_a0 []*storage.Liker, _a1 error) *Store_GetLikedDecisions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_GetLikedDecisions_Call) RunAndReturn(run func(context.Context, string, bool, *uint64, *uint32) ([]*storage.Liker, error)) *Store_GetLikedDecisions_Call {
	_c.Call.Return(run)
	return _c
}

// GetLikedDecisionsCount provides a mock function with given fields: ctx, recipientID, liked
func (_m *Store) GetLikedDecisionsCount(ctx context.Context, recipientID string, liked bool) (int, error) {
	ret := _m.Called(ctx, recipientID, liked)

	if len(ret) == 0 {
		panic("no return value specified for GetLikedDecisionsCount")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) (int, error)); ok {
		return rf(ctx, recipientID, liked)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) int); ok {
		r0 = rf(ctx, recipientID, liked)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, bool) error); ok {
		r1 = rf(ctx, recipientID, liked)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_GetLikedDecisionsCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLikedDecisionsCount'
type Store_GetLikedDecisionsCount_Call struct {
	*mock.Call
}

// GetLikedDecisionsCount is a helper method to define mock.On call
//   - ctx context.Context
//   - recipientID string
//   - liked bool
func (_e *Store_Expecter) GetLikedDecisionsCount(ctx interface{}, recipientID interface{}, liked interface{}) *Store_GetLikedDecisionsCount_Call {
	return &Store_GetLikedDecisionsCount_Call{Call: _e.mock.On("GetLikedDecisionsCount", ctx, recipientID, liked)}
}

func (_c *Store_GetLikedDecisionsCount_Call) Run(run func(ctx context.Context, recipientID string, liked bool)) *Store_GetLikedDecisionsCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(bool))
	})
	return _c
}

func (_c *Store_GetLikedDecisionsCount_Call) Return(_a0 int, _a1 error) *Store_GetLikedDecisionsCount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_GetLikedDecisionsCount_Call) RunAndReturn(run func(context.Context, string, bool) (int, error)) *Store_GetLikedDecisionsCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetNewLikedDecisions provides a mock function with given fields: ctx, recipientID, liked, token, limit
func (_m *Store) GetNewLikedDecisions(ctx context.Context, recipientID string, liked bool, token *uint64, limit *uint32) ([]*storage.Liker, error) {
	ret := _m.Called(ctx, recipientID, liked, token, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetNewLikedDecisions")
	}

	var r0 []*storage.Liker
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool, *uint64, *uint32) ([]*storage.Liker, error)); ok {
		return rf(ctx, recipientID, liked, token, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, bool, *uint64, *uint32) []*storage.Liker); ok {
		r0 = rf(ctx, recipientID, liked, token, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*storage.Liker)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, bool, *uint64, *uint32) error); ok {
		r1 = rf(ctx, recipientID, liked, token, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_GetNewLikedDecisions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNewLikedDecisions'
type Store_GetNewLikedDecisions_Call struct {
	*mock.Call
}

// GetNewLikedDecisions is a helper method to define mock.On call
//   - ctx context.Context
//   - recipientID string
//   - liked bool
//   - token *uint64
//   - limit *uint32
func (_e *Store_Expecter) GetNewLikedDecisions(ctx interface{}, recipientID interface{}, liked interface{}, token interface{}, limit interface{}) *Store_GetNewLikedDecisions_Call {
	return &Store_GetNewLikedDecisions_Call{Call: _e.mock.On("GetNewLikedDecisions", ctx, recipientID, liked, token, limit)}
}

func (_c *Store_GetNewLikedDecisions_Call) Run(run func(ctx context.Context, recipientID string, liked bool, token *uint64, limit *uint32)) *Store_GetNewLikedDecisions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(bool), args[3].(*uint64), args[4].(*uint32))
	})
	return _c
}

func (_c *Store_GetNewLikedDecisions_Call) Return(_a0 []*storage.Liker, _a1 error) *Store_GetNewLikedDecisions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_GetNewLikedDecisions_Call) RunAndReturn(run func(context.Context, string, bool, *uint64, *uint32) ([]*storage.Liker, error)) *Store_GetNewLikedDecisions_Call {
	_c.Call.Return(run)
	return _c
}

// PutDecision provides a mock function with given fields: ctx, recipient_id, actor_id, liked
func (_m *Store) PutDecision(ctx context.Context, recipient_id string, actor_id string, liked bool) error {
	ret := _m.Called(ctx, recipient_id, actor_id, liked)

	if len(ret) == 0 {
		panic("no return value specified for PutDecision")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, bool) error); ok {
		r0 = rf(ctx, recipient_id, actor_id, liked)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Store_PutDecision_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutDecision'
type Store_PutDecision_Call struct {
	*mock.Call
}

// PutDecision is a helper method to define mock.On call
//   - ctx context.Context
//   - recipient_id string
//   - actor_id string
//   - liked bool
func (_e *Store_Expecter) PutDecision(ctx interface{}, recipient_id interface{}, actor_id interface{}, liked interface{}) *Store_PutDecision_Call {
	return &Store_PutDecision_Call{Call: _e.mock.On("PutDecision", ctx, recipient_id, actor_id, liked)}
}

func (_c *Store_PutDecision_Call) Run(run func(ctx context.Context, recipient_id string, actor_id string, liked bool)) *Store_PutDecision_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(bool))
	})
	return _c
}

func (_c *Store_PutDecision_Call) Return(_a0 error) *Store_PutDecision_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Store_PutDecision_Call) RunAndReturn(run func(context.Context, string, string, bool) error) *Store_PutDecision_Call {
	_c.Call.Return(run)
	return _c
}

// PutMutualDecisions provides a mock function with given fields: ctx, recipient_id, actor_id, liked, mutuallyLiked
func (_m *Store) PutMutualDecisions(ctx context.Context, recipient_id string, actor_id string, liked bool, mutuallyLiked bool) error {
	ret := _m.Called(ctx, recipient_id, actor_id, liked, mutuallyLiked)

	if len(ret) == 0 {
		panic("no return value specified for PutMutualDecisions")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, bool, bool) error); ok {
		r0 = rf(ctx, recipient_id, actor_id, liked, mutuallyLiked)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Store_PutMutualDecisions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutMutualDecisions'
type Store_PutMutualDecisions_Call struct {
	*mock.Call
}

// PutMutualDecisions is a helper method to define mock.On call
//   - ctx context.Context
//   - recipient_id string
//   - actor_id string
//   - liked bool
//   - mutuallyLiked bool
func (_e *Store_Expecter) PutMutualDecisions(ctx interface{}, recipient_id interface{}, actor_id interface{}, liked interface{}, mutuallyLiked interface{}) *Store_PutMutualDecisions_Call {
	return &Store_PutMutualDecisions_Call{Call: _e.mock.On("PutMutualDecisions", ctx, recipient_id, actor_id, liked, mutuallyLiked)}
}

func (_c *Store_PutMutualDecisions_Call) Run(run func(ctx context.Context, recipient_id string, actor_id string, liked bool, mutuallyLiked bool)) *Store_PutMutualDecisions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(bool), args[4].(bool))
	})
	return _c
}

func (_c *Store_PutMutualDecisions_Call) Return(_a0 error) *Store_PutMutualDecisions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Store_PutMutualDecisions_Call) RunAndReturn(run func(context.Context, string, string, bool, bool) error) *Store_PutMutualDecisions_Call {
	_c.Call.Return(run)
	return _c
}

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *Store {
	mock := &Store{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
